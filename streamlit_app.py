import streamlit as st
from fedstat_api import FedStatIndicator

def reset_blocks(active_block):
    st.session_state.show_block_1 = (active_block == 1)
    st.session_state.show_block_2 = (active_block == 2)


if "show_block_1" not in st.session_state:
    st.session_state.show_block_1 = True
if "show_block_2" not in st.session_state:
    st.session_state.show_block_2 = False
if "df" not in st.session_state:
     st.session_state.df = None


st.set_page_config(page_title="–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", layout="wide", page_icon="üìä")
st.title("üìä –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

with st.sidebar:
    st.title("üîç –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    if st.button("üè† –î–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω", key = "home_screen"):
        reset_blocks(1)
    if st.button("üìà –ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è", key='button1'):
        reset_blocks(2)


if st.session_state.show_block_1:
    with st.container():
        st.markdown(
            '''
            <p style='font-size:24px;'>–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ:</p>
            <ul style='color: black; font-size: 20px;'>
                <li>–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–µ–∑–µ –ø–æ–ª–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞</li>
            </ul>
            <p style='font-size:24px;'>–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ –ª–∏–±–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏</p>
            ''',
            unsafe_allow_html=True
        )

        prompt = st.chat_input("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –≤—ã–≤–µ–¥–∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –º—É–∂—Å–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è —Å 2021 –ø–æ 2025 –ø–æ –æ–¥–Ω–æ–ª–µ—Ç–Ω–∏–º –≥—Ä—É–ø–ø–∞–º")
        if prompt:
            st.write(f"Prompt: {prompt}")


if st.session_state.show_block_2:
    with st.expander("", expanded = True):
        st.markdown(
                "<p style='font-size:22px; font-weight:bold;'>–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è</p>", 
                unsafe_allow_html=True
            )
        col1, col2 = st.columns(2)
        
        with col1:
            gender = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",
                options = ["–í—Å–µ", "–ú—É–∂—á–∏–Ω—ã", "–ñ–µ–Ω—â–∏–Ω—ã"]
            )
        gender_codes = {
            "–ú—É–∂—á–∏–Ω—ã" : 31548,
            "–ñ–µ–Ω—â–∏–Ω—ã" : 33459
        }
        if gender != "–í—Å–µ":
            try:
                indicator_1 = FedStatIndicator(gender_codes.get(gender))
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            try:
                indicator_1 = FedStatIndicator(gender_codes.get("–ú—É–∂—á–∏–Ω—ã"))
                indicator_2 = FedStatIndicator(gender_codes.get("–ñ–µ–Ω—â–∏–Ω—ã"))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

        selectbox_values = indicator_1.filter_codes
        options = indicator_1.filter_categories
        
        
        selected_values = []

        col1, col2 = st.columns([1, 1])
        for key, val in selectbox_values.items():
            sb_options = list(options.get(key).values())
            if len(sb_options) > 1:
                all_options = ["–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"] + sb_options
                with col1:
                    selected = st.multiselect(val, options = all_options, default = all_options[0])
                        
                if "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" in selected:
                    selected = sb_options
                selected_values.append(selected)
            else:
                selected_values.append(sb_options)
        
        options_dict = {}
        for option in options.values():
            options_dict.update(option)

        values_to_pass = []  
        for selected_list in selected_values:
            for value in selected_list:
                for k, v in options_dict.items():
                    if v == value:
                        values_to_pass.append(k)
       
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç"):
                if gender != "–í—Å–µ":
                    st.write(indicator_1.indicator_title)
                    st.session_state.df = indicator_1.get_processed_data(filter_ids = values_to_pass)
            
            if st.session_state is not None:

                st.dataframe(
                    st.session_state.df.head(10),
                    use_container_width= True,
                    height = 400
                )
